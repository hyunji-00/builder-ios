// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name MatrixMobileContents
import BSImagePicker
import Foundation
@_exported import MatrixMobileContents
import Matrix_Mobile
import MobileCoreServices
import ObjectiveC
import Photos
import QuickLook
import Swift
import UIKit
import UniformTypeIdentifiers
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
extension UIKit.UIView {
  public struct ToastKeys {
  }
  @_hasMissingDesignatedInitializers public class ToastCompletionWrapper {
    @objc deinit
  }
  public enum ToastError : Swift.Error {
    case missingParameters
    public static func == (a: UIKit.UIView.ToastError, b: UIKit.UIView.ToastError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor(unsafe) public var activeToasts: Foundation.NSMutableArray {
    get
  }
  @_Concurrency.MainActor(unsafe) public var queue: Foundation.NSMutableArray {
    get
  }
  @_Concurrency.MainActor(unsafe) public func makeToast(_ message: Swift.String?, duration: Foundation.TimeInterval = ToastManager.shared.duration, position: MatrixMobileContents.ToastPosition = ToastManager.shared.position, title: Swift.String? = nil, image: UIKit.UIImage? = nil, style: MatrixMobileContents.ToastStyle = ToastManager.shared.style, completion: ((_ didTap: Swift.Bool) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func makeToast(_ message: Swift.String?, duration: Foundation.TimeInterval = ToastManager.shared.duration, point: CoreFoundation.CGPoint, title: Swift.String?, image: UIKit.UIImage?, style: MatrixMobileContents.ToastStyle = ToastManager.shared.style, completion: ((_ didTap: Swift.Bool) -> Swift.Void)?)
  @_Concurrency.MainActor(unsafe) public func showToast(_ toast: UIKit.UIView, duration: Foundation.TimeInterval = ToastManager.shared.duration, position: MatrixMobileContents.ToastPosition = ToastManager.shared.position, completion: ((_ didTap: Swift.Bool) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func showToast(_ toast: UIKit.UIView, duration: Foundation.TimeInterval = ToastManager.shared.duration, point: CoreFoundation.CGPoint, completion: ((_ didTap: Swift.Bool) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func hideToast()
  @_Concurrency.MainActor(unsafe) public func hideToast(_ toast: UIKit.UIView)
  @_Concurrency.MainActor(unsafe) public func hideAllToasts(includeActivity: Swift.Bool = false, clearQueue: Swift.Bool = true)
  @_Concurrency.MainActor(unsafe) public func clearToastQueue()
  @_Concurrency.MainActor(unsafe) public func makeToastActivity(_ position: MatrixMobileContents.ToastPosition)
  @_Concurrency.MainActor(unsafe) public func makeToastActivity(_ point: CoreFoundation.CGPoint)
  @_Concurrency.MainActor(unsafe) public func hideToastActivity()
  @_Concurrency.MainActor(unsafe) public func makeToastActivity(_ toast: UIKit.UIView, point: CoreFoundation.CGPoint)
  @_Concurrency.MainActor(unsafe) public func createToastActivityView() -> UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func showToast(_ toast: UIKit.UIView, duration: Foundation.TimeInterval, point: CoreFoundation.CGPoint)
  @_Concurrency.MainActor(unsafe) public func hideToast(_ toast: UIKit.UIView, fromTap: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func toastViewForMessage(_ message: Swift.String?, title: Swift.String?, image: UIKit.UIImage?, style: MatrixMobileContents.ToastStyle) throws -> UIKit.UIView
}
public struct ToastStyle {
  public init()
  public var backgroundColor: UIKit.UIColor
  public var titleColor: UIKit.UIColor
  public var messageColor: UIKit.UIColor
  public var maxWidthPercentage: CoreFoundation.CGFloat {
    get
    set
  }
  public var maxHeightPercentage: CoreFoundation.CGFloat {
    get
    set
  }
  public var horizontalPadding: CoreFoundation.CGFloat
  public var verticalPadding: CoreFoundation.CGFloat
  public var cornerRadius: CoreFoundation.CGFloat
  public var titleFont: UIKit.UIFont
  public var messageFont: UIKit.UIFont
  public var titleAlignment: UIKit.NSTextAlignment
  public var messageAlignment: UIKit.NSTextAlignment
  public var titleNumberOfLines: Swift.Int
  public var messageNumberOfLines: Swift.Int
  public var displayShadow: Swift.Bool
  public var shadowColor: UIKit.UIColor
  public var shadowOpacity: Swift.Float {
    get
    set
  }
  public var shadowRadius: CoreFoundation.CGFloat
  public var shadowOffset: CoreFoundation.CGSize
  public var imageSize: CoreFoundation.CGSize
  public var activitySize: CoreFoundation.CGSize
  public var fadeDuration: Swift.Double
  public var activityIndicatorColor: UIKit.UIColor
  public var activityBackgroundColor: UIKit.UIColor
}
@_hasMissingDesignatedInitializers public class ToastManager {
  public static let shared: MatrixMobileContents.ToastManager
  public var style: MatrixMobileContents.ToastStyle
  public var isTapToDismissEnabled: Swift.Bool
  public var isQueueEnabled: Swift.Bool
  public var duration: Swift.Double
  public var position: MatrixMobileContents.ToastPosition
  @objc deinit
}
public enum ToastPosition {
  case top
  case center
  case bottom
  public static func == (a: MatrixMobileContents.ToastPosition, b: MatrixMobileContents.ToastPosition) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension Foundation.NSURL {
  public func mimeType() -> Swift.String
}
extension Foundation.URL {
  public func mimeType() -> Swift.String
}
extension Foundation.NSString {
  public func mimeType() -> Swift.String
}
extension Swift.String {
  public func mimeType() -> Swift.String
}
extension UIKit.UIView.ToastError : Swift.Equatable {}
extension UIKit.UIView.ToastError : Swift.Hashable {}
extension MatrixMobileContents.ToastPosition : Swift.Equatable {}
extension MatrixMobileContents.ToastPosition : Swift.Hashable {}
